#!{{pkgPathFor "core/bash"}}/bin/bash
#

set -e
exec 2>&1

# Required to allow common name feild in certificate. Feature soon to deprecated by 1.17
export GODEBUG=x509ignoreCN=0

{{#if cfg.disable ~}}
echo "Internal Postgres Disabled"
while true
do
  sleep 60
done

exit 0
{{~else}}

echo 'Executing run hook'

source {{pkg.svc_config_path}}/functions.sh

write_local_conf
ensure_dir_ownership
ensure_key_ownership

echo "Starting PostgreSQL"
PGDATA_9_6={{pkg.svc_data_path}}/pgdata
export PGDATA={{pkg.svc_data_path}}/pgdata13

if [ `cat $PGDATA_9_6/PG_VERSION`=='9.6' ]; then
  echo "Old data directory found"
  new_pg13_build=$(ls -t /hab/pkgs/core/postgresql13/13.4 | head -n 1)
  old_pg9_build=$(ls -t /hab/pkgs/core/postgresql/9.6.11 | head -n 1)
  old_pg9_bin="/hab/pkgs/core/postgresql/9.6.11/$old_pg9_build/bin"
  new_pg13_bin="/hab/pkgs/core/postgresql13/13.4/$new_pg13_build/bin"
  $new_pg13_bin/pg_upgrade --old-bindir $old_pg9_bin --new-bindir $new_pg13_bin --old-datadir $PGDATA_9_6 --new-datadir $PGDATA --link --check
  if [ $? -eq 0 ]; then
      echo "PG_UPGRADE CHECK SUCCESSFUL"
      echo "Now do actual pg_upgrade"
      $new_pg13_bin/pg_upgrade --old-bindir $old_pg9_bin --new-bindir $new_pg13_bin --old-datadir $PGDATA_9_6 --new-datadir $PGDATA --link
  else
      echo "PG_UPGRADE CHECK FAILED"
  fi
else
  echo "New data directory"
fi


pidfile="$PGDATA/postmaster.pid"
if [ -f  "$pidfile" ]; then
  pgpid=$(head -n 1 "$pidfile")
  echo "Found leftover postmaster.pid with PID=$pgpid... Checking if it's safe to remove"
  commfile="/proc/$pgpid/comm"
  if [ -r "$commfile" ]; then
    if grep "postgres" "$commfile"; then
      echo "postmaster.pid is not safe to remove"
      echo "pgsql seems to still be running"
      echo "Try systemctl restart chef-automate if postgres does not start"
    else
      echo "Running pid from postmaster.pid is not postgres. Removing postmaster.pid"
      rm "$pidfile"
    fi
  else
    # This is safe because if the user that runs postgres cant access the pid,
    # it means that process isn't the user's postgres or the process no longer exists
    echo "Could not access comm for PID=$pgpid... Removing postmaster.pid"
    rm "$pidfile"
  fi
fi

exec postgres \
  -c config_file={{pkg.svc_config_path}}/postgresql.conf
{{~/if}}
